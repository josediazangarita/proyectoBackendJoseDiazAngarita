Consignas de la segunda preentrega:

    - Objetivos generales
        * Contar con Mongo como sistema de persistencia principal
        * Tener definidos todos los endpoints para poder trabajar con productos y carritos.

    - Objetivos específicos
        * Profesionalizar las consultas de productos con filtros, paginación y ordenamienttos.
       * Profesionalizar la gestión de carrito para implementar los últimos conceptos vistos.
    
    -Entregar:
        + Modificar el método GET para que cumpla con:
            -Recibir por query params un limit (opcional), una page (opcional), un sort (opcional) y un query (opcional).
        + El método GET deberá devolver un objeto con el siguiente formato:
            -{status:succes/error
            payload: Resultado de los productos solicitados
            totalPages: Total de páginas
            prevPage: Página anterior
            nextPage: Página siguiente
            page: Página actual
            hasPrePage: Indicador para saber si la página previa existe
            hasNextPage: indicador para saber si la página siguiente existe
            prevLink: Link directo a la página previa (null si hasPrevPage=false)
            nextLink: Link directo a la página siguiente (null si hasNextPage=false)}
           -Se deberá poder buscar productos por categoría o por disponibilidad, y se deberá poder realizar un ordenamiento de estos productos de manera ascendente o descendente por precio.

        + Agregar al router de carts los siguientes endpoints:
            -DELETE api/carts/:cid/products/:pid (deberá eliminar del carrito el producto seleccionado).
            -PUT api/carts/:cid (deberá actualizar el carrito con un arreglo de productos con el formato especificado arriba).
            PUT api/carts/:cid/products/:pid (deberá poder actualizar sólo la cantidad de ejemplares del producto por cualquier cantidad pasada desde req.body).
            -DELETE api/carts/:cid (deberá eliminar todos los productos del carrito).
            -Esta vez para el modelo de Carts, en su propiedad products, el id de cada producto generado dentro del array tiene que hacer referencia al modelo de Products. Modificar la ruta /:cid para que al traer todos los productos, los traiga completos mediante un "populate". De esta manera almacenamos sólo el Id, pero al solicitarlo podemos desglosar los productos asociados.
            -Crear una vista en el router de views '/products' para visualizar todos los productos con su respectiva paginación. Cada producto mostrado puede resolverse de dos formas:
                - Llevar a una nueva vista con el producto seleccionado con su descripción completa, detalles de precio, categoría, etc. Además de un botón para agregar al carrito.
                - Contar con el botón de "agregar al carrito" directamente, sin necesidad de abrir una página adicional con los detalles del producto.
            Además, agregar una vista en '/carts/:cid (cartid) para visualizar un carrito específico, donde deberan listar SOLO los carritos que pertenezcan a dicho carrito.


    Desafío entregable:
        - Ajustar nuestro servidor principal para trabajar con un sistema de login.
        -Incluir:
            -Contar con todas las vistas realizadas en el hands on lab, así tambien como las rutas del router para procesar el registro y el login.
            -Una vez completado el login, realizar la redirección directamente a la vista de productos.
            -Agregar a la vista de productos un mensaje de buienvenida con los datos del usuario.
            -Agregar un sistema de roles, de manera que si colocamos en el login como correo y la contraseña, el usuario de la sesión además tenga un campo.
            -Todos los usuario que no sean admin deberán contar con el rol de "usuario".
            -Implementar botón de "LOGOUT" PARA DESTRUIR LA SESIÓN Y REDIRIGIR A LA VISTA DE LOGÍN. 

            Recordar: las vistas son importantes, más no el diseño. Concentrarse en la funcionalidad de las sesiones antes que en la presentación.
            Cuida las redirecciones a las múltiples vistas.


Proceso de testing:
    -Al cargar el proyecto, éste deberá comenzar en la pantalla de login.
    -Al no tener un usuario, primero se creará un usuario, para esto, la pantalla de login deberá tener un link de redirección “Regístrate”. 
    -El proceso de registro deberá guardar en la base de datos al usuario.
    -Se regresará al proceso de login y se colocarán las credenciales de manera incorrecta, esto para probar que no se pueda avanzar a la siguiente pantalla.
    -Posteriormente, se colocarán las credenciales de manera correcta, esto para corroborar que se cree una sesión correctamente y que se haga una redirección a la vista de productos.
    -La vista de productos tendrá en una parte de arriba de la página el mensaje “Bienvenido” seguido de los datos del usuario que se haya logueado (NO mostrar password). Es importante que se visualice el “rol” para ver que aparezca “usuario” o “user”.
    -Se presionará el botón de logout y se destruirá la sesión, notando cómo nos redirige a login.
    -Se ingresarán las credenciales específicas de admin indicadas en las diapositivas, el login debe redirigir correctamente y mostrar en los datos del rol: “admin” haciendo referencia a la correcta gestión de roles. 
   -Se revisará que el admin NO viva en base de datos, sino que sea una validación que se haga de manera interna en el código.

